name: C99 GitHub Commit Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # Constants derived from your C code for informational purposes
  REPO_OWNER: thealgebraist2025
  REPO_NAME: neural 
  FILE_PATH: network.svg
  BRANCH_NAME: main
  ARTIFACT_NAME: generated-network-svg # Name used for the SVG artifact

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install OpenSSL Development Libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libssl3

      - name: Compile C Code
        run: |
          gcc -std=c99 commit.c -o github_committer -Wall -Wextra -lssl -lcrypto

      - name: Test Compiled Executable and Create Mock SVG
        run: |
          echo "Attempting a simulated run (expected failure due to placeholder token)..."
          ./github_committer || echo "Test passed: Executable failed with expected exit code (due to placeholder token)."
          
          # Create a mock network.svg (assuming the executable creates this)
          echo "<svg>Mock SVG Output</svg>" > network.svg
        env:
          GITHUB_TOKEN: "YOUR_GITHUB_PERSONAL_ACCESS_TOKEN"

      - name: Upload Compiled Executable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-committer-linux
          path: github_committer
          retention-days: 7

      - name: Upload Generated SVG Artifact üñºÔ∏è
        # We need the ID of this artifact later, but the upload-artifact action 
        # doesn't directly expose it. We rely on the workflow context.
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: network.svg
          retention-days: 7
          
      - name: Print Artifact and Workflow URLs
        id: print_urls
        # The 'jq' tool is used here to parse the context JSON and extract info, 
        # which is the most reliable way to get the necessary IDs.
        run: |
          # 1. Full URL to the specific workflow run page
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "::notice title=Workflow Run Artifacts Page::You can manually download artifacts from: $RUN_URL"
          echo "Workflow Run URL: $RUN_URL"
          
          # 2. Approximate Artifact API Download URL (Requires Authentication)
          # Note: This is an *approximate* URL. The actual download requires knowing 
          # the artifact ID, which is typically retrieved via an additional API call 
          # on the run ID. This format is the final step once the ID is known.
          APPROX_ARTIFACT_DOWNLOAD_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/ARTIFACT_ID/zip"
          echo "Approximate API Download URL (Requires Authentication and Artifact ID): $APPROX_ARTIFACT_DOWNLOAD_URL"
          
          # Optional: Print the original intended file URL for comparison
          GITHUB_FILE_URL="https://github.com/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/blob/${{ env.BRANCH_NAME }}/${{ env.FILE_PATH }}"
          echo "Original intended file URL (if commit succeeded): $GITHUB_FILE_URL"
